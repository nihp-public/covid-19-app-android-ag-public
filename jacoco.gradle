apply plugin: 'jacoco'

jacoco {
    toolVersion = project.jacoco_version
    // Custom reports directory can be specified like this:
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = false
}

project.afterEvaluate {

    def productionReleaseVariant = android.applicationVariants.find { v -> v.name == "productionRelease" }
    if (productionReleaseVariant != null) {
        def variantName = productionReleaseVariant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "unitTestCoverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def excludes = [
                    'jdk.internal.*',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test.*',
                    'android/**/*.*',
                    '**/databinding/**/*.*',
                    '**/android/databinding/*Binding.*',
                    '**/BR.*',
                    '**/*_MembersInjector.*',
                    '**/Dagger*Component.*',
                    '**/Dagger*Component$Builder.*',
                    '**/*Module_*Factory.*',
                    '**/*_Factory.*',
                    '**/*Fragment*.*',
                    '**/*Application*.*',
                    '**/*Activity*.*',
                    '**/*ViewAdapter*.*',
                    '**/*JsonAdapter.*',
                    '**/*Dialog*.*',
                    '**/*Creator.class',
                    '**/*ViewPager*.*',
                    '**/*ViewHolder*.*',
                    '**/*Module*.*',
                    '**/fieldtests/*.*',
                    '**/widgets/*.*',
                    '**/remote/**',
                    '**/fieldtests/**/*.*',
                    '**/util/viewutils**'
            ]
            def javaClasses = fileTree(dir: productionReleaseVariant.javaCompiler.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}/uk", excludes: excludes)
            classDirectories.from = files([javaClasses, kotlinClasses])

            sourceDirectories.from = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
        }
    }

    def scenariosDebugVariant = android.applicationVariants.find { v -> v.name == "scenariosDebug" }
    if (scenariosDebugVariant != null) {
        def variantName = scenariosDebugVariant.name

        tasks.create(name: "uiTestCoverage", type: JacocoReport, dependsOn: "connected${variantName.capitalize()}AndroidTest") {
            group = "Reporting"
            description = "Generate Jacoco UI test coverage reports for the ${variantName.capitalize()} build."
        }

        tasks.create(name: "uiTestCoverageReport", type: JacocoReport) {
            group = "Reporting"
            description = "Generate Jacoco UI test coverage reports for the ${variantName.capitalize()} build based on coverage.ac file."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def includes = [
                    '**/*Activity.class',
                    '**/*Dialog.class',
//                    '**/widgets/*.*'
            ]

            def excludes = [
                    '**/BaseActivity.class',
                    '**/TestSettingsActivity.class',
                    '**/Mock*Activity.class',
                    '**/DebugActivity.class',
                    '**/CircularProgressBar.class'
            ]

            def javaClasses = fileTree(dir: scenariosDebugVariant.javaCompiler.destinationDir, includes: includes, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", includes: includes, excludes: excludes)
            classDirectories.from = files([javaClasses, kotlinClasses])

            sourceDirectories.from = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            def variantTestExecFolder = "${variantName}AndroidTest"
            executionData.from = fileTree(dir: project.buildDir, includes: [
                    "outputs/code_coverage/${variantTestExecFolder}/connected/*.ec"
            ])
        }

        uiTestCoverage.dependsOn uiTestCoverageReport
    }
}
