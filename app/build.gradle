import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "$rootDir/ktlint.gradle"
apply plugin: 'com.google.protobuf'
apply plugin: "com.github.triplet.play"
apply plugin: 'com.kncept.junit.reporter'

if (jacocoEnabled.toBoolean()) {
    apply from: rootProject.file("jacoco.gradle")
}

def getStringFromSecureStorage(String account, String service) {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    def executable = ""
    def arguments = []
    if (Os.isFamily(Os.FAMILY_MAC)) {
        executable = 'security'
        arguments = ['-q', 'find-generic-password', '-a', account, '-s', service, '-w']
    } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        executable = 'cmd'
        arguments = ['/c', 'powershell (New-Object PSCredential ${account} (Get-StoredCredential -Target ${service}).password).GetNetworkCredential().Password']
    } else {
        return null
    }
    exec {
        commandLine executable
        args arguments
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue true
    }
    //noinspection GroovyAssignabilityCheck
    stdout.toString().trim()
}

def user = findProperty("gpr.user") ?: System.getenv("PACKAGES_ACCESS_ACTOR")
def configurationPasswordService = "nihp-public"

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url = 'https://maven.pkg.github.com/nihp-public/covid-19-app-configuration'
            credentials {
                username = user
                password = getStringFromSecureStorage(user, configurationPasswordService) ?: findProperty("gpr.key") ?: System.getenv("PACKAGES_ACCESS_TOKEN")
            }
        }
        maven {
            url "https://maven.lokalise.co"
        }
    }
}

def buildNumber = new File('app/buildNumber').text as Integer
def versionNameValue = new File('app/versionName').text.trim()
def releaseDate = new Date().format('MM/yyyy')

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "uk.nhs.covid19"
        minSdkVersion 23
        targetSdkVersion 30
        versionName versionNameValue
        versionCode buildNumber
        testInstrumentationRunner "uk.nhs.nhsx.covid19.android.app.util.DoReToAwareAndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "VERSION_NAME_SHORT", "\"" + versionNameValue + "\""
        buildConfigField "String", "RELEASE_DATE", "\"" + releaseDate + "\""
        // testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    sourceSets {
        main.res.srcDirs = ['src/main/res', 'src/main/accordion_contents/res']
    }

    adbOptions {
        installOptions '-g', '-r'
    }

    buildTypes {
        debug {
            testCoverageEnabled jacocoEnabled.toBoolean()
            pseudoLocalesEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        String sharedTestDirectory = 'src/sharedTest/java'
        test.java.srcDirs += sharedTestDirectory
        androidTest.java.srcDirs += sharedTestDirectory
        scenarios {
            proto {
                srcDirs 'src/scenarios/java/uk/nhs/nhsx/covid19/android/app/fieldtests'
            }
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        animationsDisabled = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging.exceptionFormat = TestExceptionFormat.FULL
            testLogging.showStandardStreams = true
            systemProperty "isolationModel.repo", findProperty("isolationModel.repo")
            useJUnitPlatform()
        }
        // execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    lintOptions {
        disable 'TypographyFractions','TypographyQuotes'
        enable 'AccessibilityLabel'
    }

    signingConfigs {
        production {
            keyAlias System.getenv('PRODUCTION_UPLOAD_SIGNING_KEY_ALIAS') ?: 'dummy-keystore'
            keyPassword System.getenv('PRODUCTION_UPLOAD_SIGNING_KEY_PASSWORD') ?: 'secret'
            storeFile file(System.getenv('PRODUCTION_UPLOAD_SIGNING_KEY_STORE') ?: 'dummy-keystore')
            storePassword System.getenv('PRODUCTION_UPLOAD_SIGNING_KEY_STORE_PASSWORD') ?: 'secret'
        }
        scenarios {
            keyAlias System.getenv('INTERNAL_UPLOAD_SIGNING_KEY_ALIAS') ?: 'dummy-keystore'
            keyPassword System.getenv('INTERNAL_UPLOAD_SIGNING_KEY_PASSWORD') ?: 'secret'
            storeFile file(System.getenv('INTERNAL_UPLOAD_SIGNING_KEY_STORE') ?: 'dummy-keystore')
            storePassword System.getenv('INTERNAL_UPLOAD_SIGNING_KEY_STORE_PASSWORD') ?: 'secret'
        }
    }

    flavorDimensions "version"
    productFlavors {
        def scenariosSigning = signingConfigs.scenarios
        def productionSigning = signingConfigs.production

        scenarios {
            dimension "version"
            applicationIdSuffix ".internal"
            versionNameSuffix " (${buildNumber})"
            signingConfig scenariosSigning
        }
        production {
            dimension "version"
            applicationIdSuffix ".production"
            versionNameSuffix " (${buildNumber})"
            signingConfig productionSigning
        }
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/licenses/ASM'
    }
}

junitHtmlReport {
    testResultsDir = 'outputs/androidTest-results/connected/flavors/scenariosDebugAndroidTest'
}

play {
    serviceAccountCredentials = file(System.getenv('PLAY_SERVICES_PUBLISH') ?: 'non-existing.json')
    defaultToAppBundles = true
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.12.2'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}

def timber_version = "4.7.1"
def lifecycle_version = "2.2.0"
def work_version = "2.5.0-beta02"
def coroutines_version = "1.3.7"
def retrofit_version = "2.9.0"
def moshi_version = "1.12.0"
def okhttp_version = "4.8.0"
def configuration_version = "1.0.27-SNAPSHOT"
def dagger_version = "2.31.2"
def junit5_version = "5.7.2"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation 'com.google.android.material:material:1.1.0'
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "androidx.browser:browser:1.2.0"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation 'androidx.security:security-crypto:1.0.0-rc03'
    implementation 'com.tinder.statemachine:statemachine:0.2.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation 'com.google.android.gms:play-services-base:17.3.0'
    implementation 'com.google.android.gms:play-services-tasks:17.1.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutines_version"

    // Configurations
    implementation "uk.nhs.covid19:configuration-production:$configuration_version"
    scenariosImplementation "uk.nhs.covid19:configuration-scenarios:$configuration_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    scenariosImplementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation 'junit:junit:4.13.1'
    testImplementation platform("org.junit:junit-bom:$junit5_version")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit5_version"
    testImplementation 'io.mockk:mockk:1.10.0'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testImplementation 'org.awaitility:awaitility-kotlin:3.1.6'

    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"

    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestUtil 'androidx.test:orchestrator:1.3.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.awaitility:awaitility-kotlin:3.1.6'
    androidTestImplementation 'org.assertj:assertj-core:3.16.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation 'com.squareup.radiography:radiography:2.0.0'

    scenariosImplementation 'com.google.protobuf:protobuf-java:3.11.4'
    scenariosImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'com.google.android.play:core:1.8.0'
    implementation 'com.google.android.play:core-ktx:1.8.1'

    scenariosImplementation 'com.lokalise.android:ota-sdk:1.3.15'
    scenariosImplementation 'com.google.code.gson:gson:2.8.0'

    api 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.11.2')

    if (System.getProperty("idea.active") != "true") {
        lintChecks project(":custom-a11y-rules")
    }
}

afterEvaluate {
    dependencies {
        productionDebugImplementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    }
}

apply from: "$rootDir/screenshots.gradle"
apply from: "$rootDir/pseudoLocale.gradle"